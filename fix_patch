
From a6dfb8911402dd4ebbf7bd8f8f75f000ec2c21d7 Mon Sep 17 00:00:00 2001
From: root <root@virtual.localdomain>
Date: Thu, 3 Sep 2015 14:38:43 +0530
Subject: [PATCH] Added 3 new files to enable cpu register read

---
 arch/powerpc/include/uapi/asm/perf_regs.h   | 35 ++++++++++++
 arch/powerpc/kernel/perf_regs.c             | 39 ++++++++++++++
 tools/perf/arch/powerpc/include/perf_regs.h | 83 +++++++++++++++++++++++++++++
 3 files changed, 157 insertions(+)
 create mode 100644 arch/powerpc/include/uapi/asm/perf_regs.h
 create mode 100644 arch/powerpc/kernel/perf_regs.c
 create mode 100644 tools/perf/arch/powerpc/include/perf_regs.h

diff --git a/arch/powerpc/include/uapi/asm/perf_regs.h b/arch/powerpc/include/uapi/asm/perf_regs.h
new file mode 100644
index 0000000..b11188d
--- /dev/null
+++ b/arch/powerpc/include/uapi/asm/perf_regs.h
@@ -0,0 +1,35 @@
+#ifndef _ASM_POWERPC_PERF_REGS_H
+#define _ASM_POWERPC_PERF_REGS_H
+
+enum perf_event_powerpc_regs {
+        
+         PERF_REG_POWERPC_R0,
+	 PERF_REG_POWERPC_R1,
+	 PERF_REG_POWERPC_R2,
+	 PERF_REG_POWERPC_R3,
+	 PERF_REG_POWERPC_R4,
+ 	 PERF_REG_POWERPC_R5,
+	 PERF_REG_POWERPC_R6,
+	 PERF_REG_POWERPC_R7,
+	 PERF_REG_POWERPC_R8,
+	 PERF_REG_POWERPC_R9,
+	 PERF_REG_POWERPC_R10,
+	 PERF_REG_POWERPC_R11,
+	 PERF_REG_POWERPC_R12,
+	 PERF_REG_POWERPC_R13,
+	 PERF_REG_POWERPC_R14,
+	 PERF_REG_POWERPC_R15,
+	 PERF_REG_POWERPC_NIP,
+	 PERF_REG_POWERPC_MSR,
+	 PERF_REG_POWERPC_ORIG_R3,
+	 PERF_REG_POWERPC_CTR,
+	 PERF_REG_POWERPC_LNK,
+	 PERF_REG_POWERPC_XER,
+	 PERF_REG_POWERPC_CCR,
+	 PERF_REG_POWERPC_SOFTE,
+	 PERF_REG_POWERPC_TRAP,
+	 PERF_REG_POWERPC_DAR,
+	 PERF_REG_POWERPC_NIP,
+         PERF_REG_POWERPC_MAX,
+};
+#endif /* _ASM_POWERPC_PERF_REGS_H */
diff --git a/arch/powerpc/kernel/perf_regs.c b/arch/powerpc/kernel/perf_regs.c
new file mode 100644
index 0000000..40dda2e
--- /dev/null
+++ b/arch/powerpc/kernel/perf_regs.c
@@ -0,0 +1,39 @@
+#include <linux/errno.h>
+#include <linux/kernel.h>
+#include <linux/perf_event.h>
+#include <linux/bug.h>
+#include <asm/perf_regs.h>
+#include <asm/ptrace.h>
+
+u64 perf_reg_value(struct pt_regs *regs, int idx)
+{
+        if (WARN_ON_ONCE(idx >= PERF_REG_POWERPC_MAX))
+                return 0;
+
+        return regs_get_register(regs,idx);
+
+}
+
+#define REG_RESERVED (~((1ULL << PERF_REG_POWERPC_MAX) - 1))
+
+int perf_reg_validate(u64 mask)
+{
+        if (!mask || mask & REG_RESERVED)
+                return -EINVAL;
+
+        return 0;
+}
+
+u64 perf_reg_abi(struct task_struct *task)
+{
+        return PERF_SAMPLE_REGS_ABI_64;
+}
+
+void perf_get_regs_user(struct perf_regs *regs_user,
+                        struct pt_regs *regs,
+                        struct pt_regs *regs_user_copy)
+{
+        regs_user->regs = task_pt_regs(current);
+        regs_user->abi = perf_reg_abi(current);
+}
+~       
diff --git a/tools/perf/arch/powerpc/include/perf_regs.h b/tools/perf/arch/powerpc/include/perf_regs.h
new file mode 100644
index 0000000..a962d99
--- /dev/null
+++ b/tools/perf/arch/powerpc/include/perf_regs.h
@@ -0,0 +1,83 @@
+#ifndef ARCH_PERF_REGS_H
+#define ARCH_PERF_REGS_H
+
+#include <stdlib.h>
+#include <linux/types.h>
+#include <asm/perf_regs.h>
+
+void perf_regs_load(u64 *regs);
+
+#define PERF_REGS_MASK  ((1ULL << PERF_REG_POWERPC_MAX) - 1)
+#define PERF_REGS_MAX   PERF_REG_POWERPC_MAX
+#define PERF_SAMPLE_REGS_ABI    PERF_SAMPLE_REGS_ABI_32
+
+#define PERF_REG_IP     PERF_REG_POWERPC_NIP
+#define PERF_REG_SP     PERF_REG_POWERPC_R3
+
+static inline const char *perf_reg_name(int id)
+{
+        switch (id) {
+        case PERF_REG_POWERPC_R0:
+                return "r0";
+	case PERF_REG_POWERPC_R1:
+                return "r1";
+	case PERF_REG_POWERPC_R2:
+                return "r2";
+	 case PERF_REG_POWERPC_R3:
+                return "r3";
+        case PERF_REG_POWERPC_R4:
+                return "r4";
+        case PERF_REG_POWERPC_R5:
+                return "r5";
+	 case PERF_REG_POWERPC_R6:
+                return "r6";
+        case PERF_REG_POWERPC_R7:
+                return "r7";
+        case PERF_REG_POWERPC_R8:
+                return "r8";
+	 case PERF_REG_POWERPC_R9:
+                return "r9";
+        case PERF_REG_POWERPC_R10:
+                return "r10";
+        case PERF_REG_POWERPC_R11:
+                return "r11";
+	case PERF_REG_POWERPC_R12:
+                return "r12";
+        case PERF_REG_POWERPC_R13:
+                return "r13";
+        case PERF_REG_POWERPC_R14:
+                return "r14";
+         case PERF_REG_POWERPC_R15:
+                return "r15";
+        case PERF_REG_POWERPC_NIP:
+                return "nip";
+        case PERF_REG_POWERPC_MSR:
+                return "msr";
+         case PERF_REG_POWERPC_ORIG_R3:
+                return "orig_r3";
+        case PERF_REG_POWERPC_CTR:
+                return "ctr";
+        case PERF_REG_POWERPC_LNK:
+                return "lnk";
+	case PERF_REG_POWERPC_XER:
+                return "xer";
+        case PERF_REG_POWERPC_CCR:
+                return "ccr";
+        case PERF_REG_POWERPC_SOFTE:
+                return "softe";
+         case PERF_REG_POWERPC_TRAP:
+                return "trap";
+        case PERF_REG_POWERPC_DAR:
+                return "dar";
+        
+	default:
+		return NULL;
+	}
+	
+	return NULL;
+}
+#endif /*ARCH_PERF_REGS_H */
+
+
+        
+
-- 
2.1.0
